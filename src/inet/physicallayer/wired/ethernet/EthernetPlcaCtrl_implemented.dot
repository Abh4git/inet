digraph EthernetPlcaCtrl {
    nodesep = 1;
    ranksep = 1;

    graph [
		label = "EthernetPlcaCtrl"
		labelloc = t
		fontname = "Helvetica,Arial,sans-serif"
		fontsize = 20
		layout = dot
		newrank = true
    ];
    node [
		style=filled
		shape=rect
		pencolor="#00000044" // frames color
		fontname="Helvetica,Arial,sans-serif"
		shape=plain
    ];
    edge [fontname="Arial"];

    CS_DISABLE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_DISABLE
            </td></tr><tr><td align="left" balign="left">
                if (tx_cmd != CMD_NONE) { <br/>
                .   FSMA_Delay_Action(phy-&gt;endSignalTransmission(ESDNONE)); <br/>
                .   tx_cmd = CMD_NONE; <br/>
                .   emit(txCmdSignal, tx_cmd); <br/>
                } <br/>
                committed = false; <br/>
                curID = 0; <br/>
                emit(curIDSignal, curID);
            </td></tr></table>>
    ];
    CS_DISABLE -> CS_RESYNC [label="T1:\n local_nodeID != 0"];
    CS_DISABLE -> CS_RECOVER [label="T2:\n local_nodeID == 0"];

    CS_RESYNC [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_RESYNC
            </td></tr><tr><td align="left" balign="left">
            </td></tr></table>>;
    ];
    CS_RESYNC -> CS_EARLY_RECEIVE [label="T1:\n local_nodeID != 0 \n && CRS"];
    CS_RESYNC -> CS_SEND_BEACON [label="T2:\n PMCD \n && !CRS \n && local_nodeID == 0"];

    CS_RECOVER [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_RECOVER
            </td></tr><tr><td align="left" balign="left">
            </td></tr></table>>;
    ];
    CS_RECOVER -> CS_WAIT_TO [label="T1:\n TRUE"];

    CS_SEND_BEACON [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_SEND_BEACON
            </td></tr><tr><td align="left" balign="left">
                scheduleAfter(20 / mode-&gt;bitrate, beacon_timer); <br/>
                tx_cmd = CMD_BEACON; <br/>
                emit(txCmdSignal, tx_cmd); <br/>
                FSMA_Delay_Action(phy-&gt;startSignalTransmission(BEACON));
            </td></tr></table>>;
    ];
    CS_SEND_BEACON -> CS_SYNCING [label="T1:\n !beacon_timer->isScheduled()"];

    CS_SYNCING [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_SYNCING
            </td></tr><tr><td align="left" balign="left">
                curID = 0; <br/>
                emit(curIDSignal, curID); <br/>
                if (tx_cmd != CMD_NONE) { <br/>
                .   FSMA_Delay_Action(phy-&gt;endSignalTransmission(ESDNONE)); <br/>
                .   tx_cmd = CMD_NONE; <br/>
                .   emit(txCmdSignal, tx_cmd); <br/>
                }
            </td></tr></table>>
    ];
    CS_SYNCING -> CS_WAIT_TO [label="T1:\n !CRS"];

    CS_WAIT_TO [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_WAIT_TO
            </td></tr><tr><td align="left" balign="left">
                scheduleAfter(to_interval, to_timer);
            </td></tr></table>>
    ];
    CS_WAIT_TO -> CS_EARLY_RECEIVE [label="T1:\n CRS"];
    CS_WAIT_TO -> CS_COMMIT [label="T2:\n curID == local_nodeID \n && packetPending \n && !CRS"];
    CS_WAIT_TO -> CS_NEXT_TX_OPPORTUNITY [label="T3:\n !to_timer->isScheduled() \n && curID != local_nodeID \n && !CRS"];
    CS_WAIT_TO -> CS_YIELD [label="T4:\n curID == local_nodeID \n && !packetPending \n && !CRS"];

    CS_EARLY_RECEIVE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_EARLY_RECEIVE
            </td></tr><tr><td align="left" balign="left">
                cancelEvent(to_timer); <br/>
                scheduleAfter(22 / mode-&gt;bitrate, beacon_det_timer);
            </td></tr></table>>
    ];
    CS_EARLY_RECEIVE -> CS_SYNCING [label="T1:\n local_nodeID != 0 \n && !receiving \n && (rx_cmd == BEACON \n || (!CRS \n && beacon_det_timer->isScheduled()))"];
    CS_EARLY_RECEIVE -> CS_RESYNC [label="T2:\n !CRS \n && local_nodeID != 0 \n && rx_cmd != BEACON \n && !beacon_det_timer->isScheduled()"];
    CS_EARLY_RECEIVE -> CS_RECOVER [label="T3:\n !CRS && \n local_nodeID == 0"];
    CS_EARLY_RECEIVE -> CS_RECEIVE [label="T4:\n receiving \n && CRS"];

    CS_COMMIT [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_COMMIT
            </td></tr><tr><td align="left" balign="left">
                tx_cmd = CMD_COMMIT; <br/>
                emit(txCmdSignal, tx_cmd); <br/>
                FSMA_Delay_Action(phy-&gt;startSignalTransmission(COMMIT)); <br/>
                committed = true; <br/>
                cancelEvent(to_timer); <br/>
                bc = 0; <br/>
                emit(transmitOpportunityUsedSignal, 1); <br/>
                FSMA_Delay_Action(handleWithDataFSM(COMMIT_TO, nullptr));
            </td></tr></table>>
    ];
    CS_COMMIT -> CS_TRANSMIT [label="T1:\n TX_EN"];
    CS_COMMIT -> CS_ABORT [label="T2:\n !TX_EN && \n !packetPending"];

    CS_YIELD [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_YIELD
            </td></tr><tr><td align="left" balign="left">
                emit(transmitOpportunityUsedSignal, 0);
            </td></tr></table>>
    ];
    CS_YIELD -> CS_EARLY_RECEIVE [label="T1:\n CRS \n && to_timer->isScheduled()"];
    CS_YIELD -> CS_NEXT_TX_OPPORTUNITY [label="T2:\n !to_timer->isScheduled()"];

    CS_RECEIVE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_RECEIVE
            </td></tr><tr><td align="left" balign="left">
            </td></tr></table>>
    ];
    CS_RECEIVE -> CS_NEXT_TX_OPPORTUNITY [label="T1:\n !CRS"];

    CS_TRANSMIT [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_TRANSMIT
            </td></tr><tr><td align="left" balign="left">
                if (tx_cmd != CMD_NONE) { <br/>
                .   FSMA_Delay_Action(phy-&gt;endSignalTransmission(ESDNONE)); <br/>
                .   tx_cmd = CMD_NONE; <br/>
                .   emit(txCmdSignal, tx_cmd); <br/>
                } <br/>
                if (bc &lt;= max_bc) <br/>
                .   committed = false;
            </td></tr></table>>
    ];
    CS_TRANSMIT -> CS_NEXT_TX_OPPORTUNITY [label="T1:\n !TX_EN \n && !CRS \n && bc >= max_bc"];
    CS_TRANSMIT -> CS_BURST [label="T2:\n !TX_EN \n && bc < max_bc"];

    CS_BURST [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_BURST
            </td></tr><tr><td align="left" balign="left">
                bc = bc + 1; <br/>
                tx_cmd = CMD_COMMIT; <br/>
                emit(txCmdSignal, tx_cmd); <br/>
                FSMA_Delay_Action(phy-&gt;startSignalTransmission(COMMIT)); <br/>
                scheduleAfter(burst_interval, burst_timer);
            </td></tr></table>>
    ];
    CS_BURST -> CS_TRANSMIT [label="T1:\n TX_EN"];
    CS_BURST -> CS_ABORT [label="T2:\n !TX_EN) \n && !burst_timer->isScheduled()"];

    CS_ABORT [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                ABORT
            </td></tr><tr><td align="left" balign="left">
                if (tx_cmd != CMD_NONE) { <br/>
                .   FSMA_Delay_Action(phy-&gt;endSignalTransmission(ESD)); <br/>
                .   tx_cmd = CMD_NONE; <br/>
                .   emit(txCmdSignal, tx_cmd); <br/>
                }
            </td></tr></table>>
    ];
    CS_ABORT -> CS_NEXT_TX_OPPORTUNITY [label="T1:\n !CRS"];

    CS_NEXT_TX_OPPORTUNITY [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CS_NEXT_TX_OPPORTUNITY
            </td></tr><tr><td align="left" balign="left">
                curID = curID + 1; <br/>
                emit(curIDSignal, curID); <br/>
                committed = false;
            </td></tr></table>>
    ];
    CS_NEXT_TX_OPPORTUNITY -> CS_RESYNC [label="T1:\n (local_nodeID == 0 \n && (curID >= plca_node_count"];
    CS_NEXT_TX_OPPORTUNITY -> CS_WAIT_TO [label="T2:\n true /* ELSE */"];
}

