digraph EthernetPlcaDataFsm {
    nodesep = 1;
    ranksep = 1;

    graph [
		label = "EthernetPlcaCtrl"
		labelloc = t
		fontname = "Helvetica,Arial,sans-serif"
		fontsize = 20
		layout = dot
		newrank = true
    ];
    node [
		style=filled
		shape=rect
		pencolor="#00000044" // frames color
		fontname="Helvetica,Arial,sans-serif"
		shape=plain
    ];
    edge [fontname="Arial"];

    DS_WAIT_IDLE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_WAIT_IDLE
            </td></tr><tr><td align="left" balign="left">
                packetPending = false; <br/>
                CARRIER_STATUS = CARRIER_OFF; <br/>
                SIGNAL_STATUS = NO_SIGNAL_ERROR; <br/>
                TX_EN = false; <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_WAIT_IDLE -> DS_WAIT_IDLE_to_DS_TRANSMIT [ label="T1: \n event == START_FRAME_TRANSMISSION" ]
    DS_WAIT_IDLE -> DS_IDLE [ label="T2: \n event == CARRIER_SENSE_END" ]
    DS_WAIT_IDLE -> DS_WAIT_IDLE [ label="event == CARRIER_SENSE_START" ]

    DS_WAIT_IDLE_to_DS_TRANSMIT [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                ASSERT(currentTx == nullptr); <br/>
                currentTx = check_and_cast&lt;Packet *&gt;(message);
            </td></tr></table>>
    ];
    DS_WAIT_IDLE_to_DS_TRANSMIT -> DS_TRANSMIT;

    DS_IDLE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_IDLE
            </td></tr><tr><td align="left" balign="left">
                packetPending = false; <br/>
                CARRIER_STATUS = CARRIER_OFF; <br/>
                SIGNAL_STATUS = NO_SIGNAL_ERROR; <br/>
                TX_EN = false; <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_IDLE -> DS_RECEIVE [ label="T1: \n event == RECEPTION_START" ]
    DS_IDLE -> DS_IDLE_to_DS_HOLD [ label="T2: \n event == START_FRAME_TRANSMISSION" ]
    DS_IDLE -> DS_IDLE [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END" ]

    DS_IDLE_to_DS_HOLD [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                ASSERT(currentTx == nullptr); <br/>
                currentTx = check_and_cast&lt;Packet *&gt;(message);
            </td></tr></table>>
    ];
    DS_IDLE_to_DS_HOLD -> DS_HOLD

    DS_RECEIVE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_RECEIVE</td></tr>
            <tr><td align="left" balign="left">
                CARRIER_STATUS = CRS &amp;&amp; rx_cmd != CMD_COMMIT ? CARRIER_ON : CARRIER_OFF;
            </td></tr></table>>
    ];
    DS_RECEIVE -> DS_RECEIVE_to_DS_IDLE [ label="T1: \n event == RECEPTION_END" ]
    DS_RECEIVE -> DS_RECEIVE_to_DS_COLLIDE [ label="T2: \n event == START_FRAME_TRANSMISSION" ]
    DS_RECEIVE -> DS_RECEIVE_to_DS_RECEIVE [ label="T3: \n event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END" ]

    DS_RECEIVE_to_DS_IDLE [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CARRIER_STATUS = CRS &amp;&amp; rx_cmd != CMD_COMMIT ? CARRIER_ON : CARRIER_OFF;
            </td></tr></table>>
    ];
    DS_RECEIVE_to_DS_IDLE -> DS_IDLE

    DS_RECEIVE_to_DS_COLLIDE [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                delete message;
            </td></tr></table>>
    ];
    DS_RECEIVE_to_DS_COLLIDE -> DS_COLLIDE

    DS_RECEIVE_to_DS_RECEIVE [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                CARRIER_STATUS = CRS &amp;&amp; rx_cmd != CMD_COMMIT ? CARRIER_ON : CARRIER_OFF;
            </td></tr></table>>
    ];
    DS_RECEIVE_to_DS_RECEIVE -> DS_RECEIVE

    DS_HOLD [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_HOLD
            </td></tr><tr><td align="left" balign="left">
                packetPending = true; <br/>
                CARRIER_STATUS = CARRIER_ON; <br/>
                scheduleAfter(delay_line_length * 4 / mode-&gt;bitrate, hold_timer); <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_HOLD -> DS_HOLD_to_DS_COLLIDE_T1 [ label="T1: \n event == END_HOLD_TIMER," ]
    DS_HOLD -> DS_HOLD_to_DS_COLLIDE_T2 [ label="T2: \n event == RECEPTION_START" ]
    DS_HOLD -> DS_HOLD_to_DS_TRANSMIT [ label="T3: \n event == COMMIT_TO" ]
    DS_HOLD -> DS_HOLD [ label="event == CARRIER_SENSE_START \n || event == CARRIER_SENSE_END" ]

    DS_HOLD_to_DS_COLLIDE_T1 [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                delete currentTx; <br/>
                currentTx = nullptr;
            </td></tr></table>>
    ]
    DS_HOLD_to_DS_COLLIDE_T1 -> DS_COLLIDE

    DS_HOLD_to_DS_COLLIDE_T2 [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                delete currentTx; <br/>
                currentTx = nullptr; <br/>
                cancelEvent(hold_timer);
            </td></tr></table>>
    ]
    DS_HOLD_to_DS_COLLIDE_T2 -> DS_COLLIDE

    DS_HOLD_to_DS_TRANSMIT [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                cancelEvent(hold_timer);
            </td></tr></table>>
    ]
    DS_HOLD_to_DS_TRANSMIT -> DS_TRANSMIT

    DS_COLLIDE [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_COLLIDE
            </td></tr><tr><td align="left" balign="left">
                packetPending = false; <br/>
                CARRIER_STATUS = CARRIER_ON; <br/>
                SIGNAL_STATUS = SIGNAL_ERROR; <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_COLLIDE -> DS_DELAY_PENDING [ label="T1: \n event == END_SIGNAL_TRANSMISSION" ]
    DS_COLLIDE -> DS_COLLIDE [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END || \n event == RECEPTION_START || \n event == RECEPTION_END" ]

    DS_DELAY_PENDING [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_DELAY_PENDING
            </td></tr><tr><td align="left" balign="left">
                SIGNAL_STATUS = NO_SIGNAL_ERROR; <br/>
                scheduleAfter(512 / mode-&gt;bitrate, pending_timer);
            </td></tr></table>>
    ];
    DS_DELAY_PENDING -> DS_PENDING [ label="T1: \n event == END_PENDING_TIMER" ]
    DS_DELAY_PENDING -> DS_DELAY_PENDING [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END || \n event == RECEPTION_START || \n event == RECEPTION_END" ]

    DS_PENDING [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_PENDING
            </td></tr><tr><td align="left" balign="left">
                packetPending = true; <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_PENDING -> DS_WAIT_MAC [ label="T1: \n event == COMMIT_TO" ]
    DS_PENDING -> DS_PENDING [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END || \n event == RECEPTION_START || \n event == RECEPTION_END" ]

    DS_WAIT_MAC [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_WAIT_MAC
            </td></tr><tr><td align="left" balign="left">
                CARRIER_STATUS = CARRIER_OFF; <br/>
                scheduleAfter(288 / mode-&gt;bitrate, commit_timer)
            </td></tr></table>>
    ];
    DS_WAIT_MAC -> DS_WAIT_MAC_to_DS_TRANSMIT [ label="T1: \n event == START_FRAME_TRANSMISSION" ]
    DS_WAIT_MAC -> DS_WAIT_IDLE [ label="T2: \n event == END_COMMIT_TIMER" ]
    DS_WAIT_MAC -> DS_WAIT_MAC [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END || \n event == RECEPTION_START || \n event == RECEPTION_END" ]

    DS_WAIT_MAC_to_DS_TRANSMIT [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                cancelEvent(commit_timer); <br/>
                ASSERT(currentTx == nullptr); <br/>
                currentTx = check_and_cast&lt;Packet *&gt;(message);
            </td></tr></table>>
    ]
    DS_WAIT_MAC_to_DS_TRANSMIT -> DS_TRANSMIT

    DS_TRANSMIT [
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                DS_TRANSMIT
            </td></tr><tr><td align="left" balign="left">
                packetPending = false; <br/>
                CARRIER_STATUS = CARRIER_ON; <br/>
                SIGNAL_STATUS = COL ? SIGNAL_ERROR : NO_SIGNAL_ERROR; <br/>
                TX_EN = true; <br/>
                if (tx_cmd != CMD_NONE) { // KLUDGE: end commit signal <br/>
                .   FSMA_Delay_Action(phy-&gt;endSignalTransmission(ESDNONE)); <br/>
                .   tx_cmd = CMD_NONE; <br/>
                .   emit(txCmdSignal, tx_cmd); <br/>
                } <br/>
                simtime_t duration = b(currentTx-&gt;getDataLength() + ETHERNET_PHY_HEADER_LEN + getEsdLength()).get() / mode-&gt;bitrate; <br/>
                scheduleAfter(duration, tx_timer); <br/>
                ASSERT(macStartFrameTransmissionTime != -1); <br/>
                emit(packetPendingDelaySignal, simTime() - macStartFrameTransmissionTime); <br/>
                macStartFrameTransmissionTime = -1; <br/>
                if (phyStartFrameTransmissionTime != -1) <br/>
                .   emit(packetIntervalSignal, simTime() - phyStartFrameTransmissionTime); <br/>
                phyStartFrameTransmissionTime = simTime(); <br/>
                FSMA_Delay_Action(phy-&gt;startFrameTransmission(currentTx-&gt;dup(), bc &lt; max_bc - 1 ? ESDBRS : ESD)); <br/>
                FSMA_Delay_Action(handleWithControlFSM());
            </td></tr></table>>
    ];
    DS_TRANSMIT -> DS_TRANSMIT_to_DS_WAIT_IDLE [ label="T1: \n event == END_TX_TIMER" ]
    DS_TRANSMIT -> DS_TRANSMIT [ label="event == CARRIER_SENSE_START || \n event == CARRIER_SENSE_END" ]

    DS_TRANSMIT_to_DS_WAIT_IDLE [
        fillcolor=lightgreen
        label=<<table border="0" cellborder="1" cellspacing="0"><tr><td>
                delete currentTx; <br/>
                currentTx = nullptr; <br/>
                FSMA_Delay_Action(phy-&gt;endFrameTransmission());
            </td></tr></table>>
    ]
    DS_TRANSMIT_to_DS_WAIT_IDLE -> DS_WAIT_IDLE;
}

